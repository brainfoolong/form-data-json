// form-data-json-convert | version: 3.0.0 | url: https://github.com/brainfoolong/form-data-json
"use strict";class FormDataJson{static toJson(a,b){function c(a,b){for(let d in a){const e=a[d],f=g.flatList?e.name:d;if("nested"===e.type){g.flatList?c(e.tree,b):(b[d]={},c(e.tree,b[d]));continue}const h=e.input,i=e.inputType;if("file"===i){g.filesCallback&&j.push({object:b,key:f,input:h});continue}let k=null;if("radio"===e.type){for(let a=0;a<e.inputs.length;a++){const b=e.inputs[a];if(b.checked){k=b.value;break}}null===k&&(k=g.uncheckedValue)}else if("checkbox"===i)k=h.checked?h.value:g.uncheckedValue;else if(h instanceof HTMLSelectElement){let a=[];for(let b,c=0;c<h.options.length;c++)b=h.options[c],b.selected&&a.push(("undefined"==typeof b.value?b.text:b.value).toString());k=h.multiple?a:a.length?a[0]:null}else k=h.value;g.flatList?b.push([e.name,k]):b[f]=k}}function d(a){if(FormDataJson.isObject(a)){let b=0,c=!0;for(let e in a)FormDataJson.isObject(a[e])&&!(a[e]instanceof Element)&&(a[e]=d(a[e])),parseInt(e)!==b&&(c=!1),b++;if(c){let b=[];for(let c in a)b.push(a[c]);return b}}return a}function e(){return g.skipEmpty&&(i=f(i)||(g.flatList?[]:{})),g.arrayify&&(i=d(i)),i}function f(a,b=0){const c=FormDataJson.isArray(a)?[]:{};let d=0;for(let e in a){let h=a[e];(g.flatList&&!b&&(h=h[1]),null!==h&&void 0!==h&&""!==h)&&((FormDataJson.isObject(h)||FormDataJson.isArray(h))&&(h=f(h,(b||0)+1)||""),"object"==typeof h||""!==FormDataJson.stringify(h))&&(FormDataJson.isArray(c)?c.push(g.flatList&&!b?[a[e][0],h]:h):c[e]=h,d++)}return d?c:null}const g=FormDataJson.merge(FormDataJson.defaultOptionsToJson,b),h=FormDataJson.getFieldTree(a,function(a){if("function"==typeof g.inputFilter&&!0!==g.inputFilter(a))return!1;if(!g.includeDisabled&&a.hasAttribute("disabled"))return!1;const b=(a.getAttribute("type")||"text").toLowerCase();return!(!g.includeButtonValues&&(a instanceof HTMLButtonElement||-1<FormDataJson.buttonInputTypes.indexOf(b)))&&!(a instanceof HTMLInputElement&&"undefined"==typeof g.uncheckedValue&&-1<FormDataJson.checkedInputTypes.indexOf(b)&&!a.checked)},g);let i=g.flatList?[]:{};const j=[];if(c(h,i),j.length){let a=0,b=0;for(let c=0;c<j.length;c++){let d=j[c],f=d.object;b+=d.input.files.length;for(let c=0;c<d.input.files.length;c++){let h=d.input.files[c],i=new FileReader;i.onload=function(){d.input.multiple?(!FormDataJson.isArray(f[d.key])&&(f[d.key]=[]),f[d.key].push(i.result)):f[d.key]=i.result,a++,a===b&&g.filesCallback(e())},i[g.fileReaderFunction](h)}}return null}return g.filesCallback?(g.filesCallback(e()),null):e()}static fromJson(a,b,c){function d(a,b){if(FormDataJson.isObject(b)||FormDataJson.isArray(b))for(let c in a){const f=a[c],h=e.flatList?f.name:c;if("nested"===f.type){if(e.flatList)d(f.tree,b);else if("object"==typeof b[h]){const a=b[h];let c=f.tree;if(FormDataJson.isArray(a))for(let b in c={},f.tree){const d=f.tree[b];if(d.autoIncrementInputs&&"checkbox"===d.input.type.toLowerCase()&&-1<a.indexOf(d.input.value)){d.input.checked=!0;continue}c[b]=d}d(c,a)}continue}if(e.flatList){for(let a in b){const c=b[a];if(c&&c[0]===f.name&&g[f.name]!==a){g[f.name]=a,FormDataJson.setInputValue(f,c[1],e.triggerChangeEvent);break}}continue}"undefined"!=typeof b[h]&&FormDataJson.setInputValue(f,b[h]||null,e.triggerChangeEvent)}}if(!FormDataJson.isObject(b)&&!FormDataJson.isArray(b))return;const e=FormDataJson.merge(FormDataJson.defaultOptionsFromJson,c),f=FormDataJson.getFieldTree(a,null,e),g={};e.clearOthers&&FormDataJson.clear(a,e),e.resetOthers&&FormDataJson.reset(a,e),d(f,b)}static reset(a,b=void 0){function c(a){for(let b in a){const e=a[b];if("nested"===e.type){c(e.tree);continue}if("radio"===e.type){for(let a=0;a<e.inputs.length;a++){const b=e.inputs[a];b.checked=b.defaultChecked}continue}if(e.inputType&&-1<FormDataJson.buttonInputTypes.indexOf(e.inputType))continue;const f=e.input;if(-1<FormDataJson.checkedInputTypes.indexOf(e.inputType))FormDataJson.setInputValue(e,f.defaultChecked,d.triggerChangeEvent);else if(f instanceof HTMLSelectElement){const a=f.querySelectorAll("option"),b=[];for(let c=0;c<a.length;c++){const d=a[c];d.defaultSelected&&b.push(d.value)}FormDataJson.setInputValue(e,b,d.triggerChangeEvent)}else f.getAttribute("value")?FormDataJson.setInputValue(e,f.getAttribute("value"),d.triggerChangeEvent):("string"==typeof f.defaultValue||"number"==typeof f.defaultValue)&&FormDataJson.setInputValue(e,f.defaultValue,d.triggerChangeEvent)}}const d=FormDataJson.merge(FormDataJson.defaultOptionsReset,b),e=FormDataJson.getFieldTree(a,null,d);c(e)}static clear(a,b=void 0){function c(a){for(let b in a){const e=a[b];if("nested"===e.type){c(e.tree);continue}e.input&&-1<FormDataJson.buttonInputTypes.indexOf(e.inputType)||FormDataJson.setInputValue(e,null,d.triggerChangeEvent)}}const d=FormDataJson.merge(FormDataJson.defaultOptionsClear,b),e=FormDataJson.getFieldTree(a,null,d);c(e)}static setInputValue(a,b,c=!1){const d=c?function(a){let b;"function"==typeof Event?b=new Event("change",{bubbles:!0}):(b=document.createEvent("Event"),b.initEvent("change",!0,!0)),a.dispatchEvent(b)}:null;if("radio"===a.type){let c=[];for(let d=0;d<a.inputs.length;d++){const e=a.inputs[d];if(e.checked&&c.push(e),e.checked=!1,null!==b&&FormDataJson.stringify(e.value)===FormDataJson.stringify(b)){e.checked||c.push(e),e.checked=!0;break}}if(d)for(let a in c)d(c[a]);return}const e=a.input,f=a.inputType;if("file"===f)return;let g=!1;if("checkbox"===f)b=!0===b||null!==b&&FormDataJson.stringify(e.value)===FormDataJson.stringify(b),b!==e.checked&&(g=!0),e.checked=b;else if(e instanceof HTMLSelectElement){let a=b;null===a||a===void 0?a=[]:FormDataJson.isObject(a)?a=Object.values(a):!FormDataJson.isArray(a)&&(a=[a]);const c=[],d=[];for(let b=0;b<e.options.length;b++){const f=e.options[b],g=("undefined"==typeof f.value?f.text:f.value).toString();f.selected&&c.push(b),f.selected=!1;for(let b=0;b<a.length;b++)if(g===FormDataJson.stringify(a[b])){f.selected=!0;break}f.selected&&d.push(b)}g=JSON.stringify(c)!==JSON.stringify(d)}else e.value!==b&&(g=!0),e.value=b;g&&d&&d(e)}static stringify(a){return void 0===a?"":"object"==typeof a?"":"boolean"==typeof a?a?"1":"0":a+""}static getFieldTree(a,b=null,c){const d=FormDataJson.getElement(a);if(!d)return[];let e=Array.from(d.querySelectorAll("select, textarea, input, button"));if(c.includeLinkedFormElements&&d instanceof HTMLFormElement&&d.getAttribute("id")){const a=d.getAttribute("id");e=e.concat(Array.from(document.querySelectorAll("select[form=\""+a+"\"], textarea[form=\""+a+"\"], input[form=\""+a+"\"], button[form=\""+a+"\"]")))}let f={},g={};for(let d=0;d<e.length;d++){const a=e[d];if(!a.name||0===a.name.length)continue;if(b&&!0!==b(a))continue;const c=(a.type||"text").toLowerCase();let h=a.name;const i=a.name.replace(/]/g,"").split("["),k="[]"===h.substring(h.length-2);k&&(a instanceof HTMLSelectElement&&a.multiple?i.pop():"radio"===c&&i.pop());const l=i.length;let m=f,n="";for(let b=0;b<l;b++){let d=i[b],e=n?n+"["+d+"]":d;""===d&&("undefined"==typeof g[e]&&(g[e]=0),d=g[e].toString(),g[e]++),n=n?n+"["+d+"]":d,l-1==b?"radio"===(a.type||"text").toLowerCase()?("undefined"==typeof m[d]&&(m[d]={type:"radio",name:a.name,inputType:c,inputs:[],autoIncrementInputs:0}),k&&(m[d].autoIncrementInputs=1),m[d].inputs.push(a)):m[d]={type:"default",name:a.name,inputType:c,input:a,autoIncrementInputs:k?1:0}:(("undefined"==typeof m[d]||"undefined"==typeof m[d].tree)&&(m[d]={type:"nested",tree:{}}),m=m[d].tree)}}return f}static isObject(a){return a&&"object"==typeof a&&"[object Array]"!==Object.prototype.toString.call(a)}static isArray(a){return Array.isArray(a)}static getElement(a){return"string"==typeof a?document.querySelector(a):a instanceof HTMLElement?a:"undefined"!=typeof jQuery&&a instanceof jQuery?a[0]:"undefined"!=typeof $&&a instanceof $?a[0]:(console.warn("FormDataJson: Unsupported element passed. Supported is HTMLElement, a string query selector, JQuery or $ object"),null)}static merge(d,a){let b={};for(let c in d)b[c]=d[c];for(let c in a)b[c]=a[c];return b}}FormDataJson.defaultOptionsToJson={includeDisabled:!1,includeButtonValues:!1,uncheckedValue:void 0,inputFilter:null,flatList:!1,skipEmpty:!1,filesCallback:null,fileReaderFunction:"readAsDataURL",arrayify:!0,includeLinkedFormElements:!0},FormDataJson.defaultOptionsFromJson={flatList:!1,clearOthers:!1,resetOthers:!1,triggerChangeEvent:!1,includeLinkedFormElements:!0},FormDataJson.defaultOptionsReset={triggerChangeEvent:!1,includeLinkedFormElements:!0},FormDataJson.defaultOptionsClear={triggerChangeEvent:!1,includeLinkedFormElements:!0},FormDataJson.buttonInputTypes=["button","submit","reset","image"],FormDataJson.checkedInputTypes=["checkbox","radio"];